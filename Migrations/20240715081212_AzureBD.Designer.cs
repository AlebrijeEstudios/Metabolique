// <auto-generated />
using System;
using AppVidaSana.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppVidaSana.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240715081212_AzureBD")]
    partial class AzureBD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.Alimentos_Almuerzo", b =>
                {
                    b.Property<Guid>("alimentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("almuerzoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("cantidadConsumida")
                        .HasColumnType("real");

                    b.Property<string>("nombreAlimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("alimentoID");

                    b.HasIndex("almuerzoID");

                    b.ToTable("alimentosAlmuerzo");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.Alimentos_Cena", b =>
                {
                    b.Property<Guid>("alimentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("cantidadConsumida")
                        .HasColumnType("real");

                    b.Property<Guid>("cenaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nombreAlimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("alimentoID");

                    b.HasIndex("cenaID");

                    b.ToTable("alimentosCena");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.Alimentos_Colacion", b =>
                {
                    b.Property<Guid>("alimentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("cantidadConsumida")
                        .HasColumnType("real");

                    b.Property<Guid>("colacionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nombreAlimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("alimentoID");

                    b.HasIndex("colacionID");

                    b.ToTable("alimentosColacion");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.Alimentos_Comida", b =>
                {
                    b.Property<Guid>("alimentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("cantidadConsumida")
                        .HasColumnType("real");

                    b.Property<Guid>("comidaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nombreAlimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("alimentoID");

                    b.HasIndex("comidaID");

                    b.ToTable("alimentosComida");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.Alimentos_Desayuno", b =>
                {
                    b.Property<Guid>("alimentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("cantidadConsumida")
                        .HasColumnType("real");

                    b.Property<Guid>("desayunoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nombreAlimento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("alimentoID");

                    b.HasIndex("desayunoID");

                    b.ToTable("alimentosDesayuno");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Almuerzo", b =>
                {
                    b.Property<Guid>("almuerzoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("emocionesLigadas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("hora")
                        .HasColumnType("time");

                    b.Property<string>("nivelSaciedad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("almuerzoID");

                    b.HasIndex("cuentaID");

                    b.ToTable("Almuerzos");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Cena", b =>
                {
                    b.Property<Guid>("cenaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("emocionesLigadas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("hora")
                        .HasColumnType("time");

                    b.Property<string>("nivelSaciedad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cenaID");

                    b.HasIndex("cuentaID");

                    b.ToTable("Cenas");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Colacion", b =>
                {
                    b.Property<Guid>("colacionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("emocionesLigadas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("hora")
                        .HasColumnType("time");

                    b.Property<string>("nivelSaciedad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("colacionID");

                    b.HasIndex("cuentaID");

                    b.ToTable("Colaciones");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Comida", b =>
                {
                    b.Property<Guid>("comidaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("emocionesLigadas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("hora")
                        .HasColumnType("time");

                    b.Property<string>("nivelSaciedad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("comidaID");

                    b.HasIndex("cuentaID");

                    b.ToTable("Comidas");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Desayuno", b =>
                {
                    b.Property<Guid>("desayunoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("emocionesLigadas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("hora")
                        .HasColumnType("time");

                    b.Property<string>("nivelSaciedad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("desayunoID");

                    b.HasIndex("cuentaID");

                    b.ToTable("Desayunos");
                });

            modelBuilder.Entity("AppVidaSana.Models.Cuenta", b =>
                {
                    b.Property<Guid>("cuentaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cuentaID");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("AppVidaSana.Models.EfectoSecundario", b =>
                {
                    b.Property<Guid>("registroID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("horarioFinal")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("horarioInicio")
                        .HasColumnType("time");

                    b.HasKey("registroID");

                    b.HasIndex("cuentaID");

                    b.ToTable("efectoSecundarios");
                });

            modelBuilder.Entity("AppVidaSana.Models.Ejercicio", b =>
                {
                    b.Property<Guid>("ejercicioID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<string>("intensidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tiempo")
                        .HasColumnType("int");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ejercicioID");

                    b.HasIndex("cuentaID");

                    b.ToTable("Ejercicios");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.HBebida", b =>
                {
                    b.Property<Guid>("habitoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("cantidadConsumida")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<string>("tipoBebida")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("habitoID");

                    b.HasIndex("cuentaID");

                    b.ToTable("habitosBebida");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.HDrogas", b =>
                {
                    b.Property<Guid>("habitoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("cigarrosConsumidos")
                        .HasColumnType("int");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("estadoEmocionalPredominante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.HasKey("habitoID");

                    b.HasIndex("cuentaID");

                    b.ToTable("habitosDroga");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.HSueño", b =>
                {
                    b.Property<Guid>("habitoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<int>("horasSueño")
                        .HasColumnType("int");

                    b.Property<string>("percepcionDescanso")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("habitoID");

                    b.HasIndex("cuentaID");

                    b.ToTable("habitosSueño");
                });

            modelBuilder.Entity("AppVidaSana.Models.Medicamento", b =>
                {
                    b.Property<Guid>("medicamentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("dosis")
                        .HasColumnType("int");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<int>("frecuenciaDiaria")
                        .HasColumnType("int");

                    b.Property<string>("frecuenciaSem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("horario1")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("horario2")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("horario3")
                        .HasColumnType("time");

                    b.Property<string>("nombreMedicamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("medicamentoID");

                    b.HasIndex("cuentaID");

                    b.ToTable("Medicamentos");
                });

            modelBuilder.Entity("AppVidaSana.Models.Perfil", b =>
                {
                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("estatura")
                        .HasColumnType("int");

                    b.Property<DateOnly>("fechaNacimiento")
                        .HasColumnType("date");

                    b.Property<int>("peso")
                        .HasColumnType("int");

                    b.Property<string>("protocolo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cuentaID");

                    b.ToTable("Perfiles");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.Respuestas.RAlimentacion", b =>
                {
                    b.Property<Guid>("resultadosID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("clasificacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("puntosPregunta1")
                        .HasColumnType("int");

                    b.Property<int>("puntosPregunta10")
                        .HasColumnType("int");

                    b.Property<int>("puntosPregunta2")
                        .HasColumnType("int");

                    b.Property<int>("puntosPregunta3")
                        .HasColumnType("int");

                    b.Property<int>("puntosPregunta4")
                        .HasColumnType("int");

                    b.Property<int>("puntosPregunta5")
                        .HasColumnType("int");

                    b.Property<int>("puntosPregunta6")
                        .HasColumnType("int");

                    b.Property<int>("puntosPregunta7")
                        .HasColumnType("int");

                    b.Property<int>("puntosPregunta8")
                        .HasColumnType("int");

                    b.Property<int>("puntosPregunta9")
                        .HasColumnType("int");

                    b.Property<Guid>("seguimientoMensualID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("totalPuntos")
                        .HasColumnType("int");

                    b.HasKey("resultadosID");

                    b.HasIndex("seguimientoMensualID")
                        .IsUnique();

                    b.ToTable("resultadosAlimentacion");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.Resultados.RHabitos", b =>
                {
                    b.Property<Guid>("resultadosID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("clasificacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("clasificacionGlobal")
                        .HasColumnType("int");

                    b.Property<int>("resultadoComponente1")
                        .HasColumnType("int");

                    b.Property<int>("resultadoComponente2")
                        .HasColumnType("int");

                    b.Property<int>("resultadoComponente3")
                        .HasColumnType("int");

                    b.Property<int>("resultadoComponente4")
                        .HasColumnType("int");

                    b.Property<int>("resultadoComponente5")
                        .HasColumnType("int");

                    b.Property<int>("resultadoComponente6")
                        .HasColumnType("int");

                    b.Property<int>("resultadoComponente7")
                        .HasColumnType("int");

                    b.Property<Guid>("seguimientoMensualID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("resultadosID");

                    b.HasIndex("seguimientoMensualID")
                        .IsUnique();

                    b.ToTable("resultadosHabitos");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenAlimentacion", b =>
                {
                    b.Property<Guid>("seguimientoMensualID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("año")
                        .HasColumnType("int");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("mes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta8")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta9")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("seguimientoMensualID");

                    b.HasIndex("cuentaID");

                    b.ToTable("SegMenAlimentacion");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenEjercicio", b =>
                {
                    b.Property<Guid>("seguimientoMensualID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("actCaminata")
                        .HasColumnType("real");

                    b.Property<float>("actfModerada")
                        .HasColumnType("real");

                    b.Property<float>("actfVigorosa")
                        .HasColumnType("real");

                    b.Property<int>("año")
                        .HasColumnType("int");

                    b.Property<string>("conductaSend")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("mes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nivelAF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pregunta1")
                        .HasColumnType("int");

                    b.Property<int>("pregunta2")
                        .HasColumnType("int");

                    b.Property<int>("pregunta3")
                        .HasColumnType("int");

                    b.Property<int>("pregunta4")
                        .HasColumnType("int");

                    b.Property<int>("pregunta5")
                        .HasColumnType("int");

                    b.Property<int>("pregunta6")
                        .HasColumnType("int");

                    b.Property<int>("pregunta7")
                        .HasColumnType("int");

                    b.Property<float>("totalMET")
                        .HasColumnType("real");

                    b.HasKey("seguimientoMensualID");

                    b.HasIndex("cuentaID");

                    b.ToTable("SegMenEjercicios");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenHabitos", b =>
                {
                    b.Property<Guid>("seguimientoMensualID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("año")
                        .HasColumnType("int");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("mes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("respuestaPregunta1")
                        .HasColumnType("time");

                    b.Property<int>("respuestaPregunta2")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("respuestaPregunta3")
                        .HasColumnType("time");

                    b.Property<int>("respuestaPregunta4")
                        .HasColumnType("int");

                    b.Property<string>("respuestaPregunta5a")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta5b")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta5c")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta5d")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta5e")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta5f")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta5g")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta5h")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta5i")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta5j")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta8")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta9")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("seguimientoMensualID");

                    b.HasIndex("cuentaID");

                    b.ToTable("SegMenHabitos");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenMedicamentos", b =>
                {
                    b.Property<Guid>("seguimientoMensualID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("adherenciaTratamiento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("año")
                        .HasColumnType("int");

                    b.Property<Guid>("cuentaID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("mes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("respuestaPregunta4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("seguimientoMensualID");

                    b.HasIndex("cuentaID");

                    b.ToTable("SegMenMedicamentos");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.Alimentos_Almuerzo", b =>
                {
                    b.HasOne("AppVidaSana.Models.Alimentación.Almuerzo", "almuerzo")
                        .WithMany("alimentosAlmuerzo")
                        .HasForeignKey("almuerzoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("almuerzo");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.Alimentos_Cena", b =>
                {
                    b.HasOne("AppVidaSana.Models.Alimentación.Cena", "cena")
                        .WithMany("alimentosCena")
                        .HasForeignKey("cenaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cena");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.Alimentos_Colacion", b =>
                {
                    b.HasOne("AppVidaSana.Models.Alimentación.Colacion", "colacion")
                        .WithMany("alimentosColacion")
                        .HasForeignKey("colacionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("colacion");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.Alimentos_Comida", b =>
                {
                    b.HasOne("AppVidaSana.Models.Alimentación.Comida", "comida")
                        .WithMany("alimentosComida")
                        .HasForeignKey("comidaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("comida");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.Alimentos_Desayuno", b =>
                {
                    b.HasOne("AppVidaSana.Models.Alimentación.Desayuno", "desayuno")
                        .WithMany("alimentosDesayuno")
                        .HasForeignKey("desayunoID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("desayuno");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Almuerzo", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("almuerzos")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Cena", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("cenas")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Colacion", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("colaciones")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Comida", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("comidas")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Desayuno", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("desayunos")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.EfectoSecundario", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("efectoSecundarios")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Ejercicio", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("ejercicios")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.HBebida", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("habitosBebida")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.HDrogas", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("habitosDroga")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.HSueño", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("habitosSueño")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Medicamento", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("medicamentos")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Perfil", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithOne("perfil")
                        .HasForeignKey("AppVidaSana.Models.Perfil", "cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.Respuestas.RAlimentacion", b =>
                {
                    b.HasOne("AppVidaSana.Models.Seguimientos_Mensuales.SegMenAlimentacion", "seguimientoMensualAlimentos")
                        .WithOne("resultados")
                        .HasForeignKey("AppVidaSana.Models.Seguimientos_Mensuales.Respuestas.RAlimentacion", "seguimientoMensualID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("seguimientoMensualAlimentos");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.Resultados.RHabitos", b =>
                {
                    b.HasOne("AppVidaSana.Models.Seguimientos_Mensuales.SegMenHabitos", "seguimientoMensualHabitos")
                        .WithOne("resultados")
                        .HasForeignKey("AppVidaSana.Models.Seguimientos_Mensuales.Resultados.RHabitos", "seguimientoMensualID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("seguimientoMensualHabitos");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenAlimentacion", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("segMenAlimentacion")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenEjercicio", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("segMenEjercicio")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenHabitos", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("segMenHabitos")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenMedicamentos", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("segMenMedicamentos")
                        .HasForeignKey("cuentaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Almuerzo", b =>
                {
                    b.Navigation("alimentosAlmuerzo");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Cena", b =>
                {
                    b.Navigation("alimentosCena");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Colacion", b =>
                {
                    b.Navigation("alimentosColacion");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Comida", b =>
                {
                    b.Navigation("alimentosComida");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Desayuno", b =>
                {
                    b.Navigation("alimentosDesayuno");
                });

            modelBuilder.Entity("AppVidaSana.Models.Cuenta", b =>
                {
                    b.Navigation("almuerzos");

                    b.Navigation("cenas");

                    b.Navigation("colaciones");

                    b.Navigation("comidas");

                    b.Navigation("desayunos");

                    b.Navigation("efectoSecundarios");

                    b.Navigation("ejercicios");

                    b.Navigation("habitosBebida");

                    b.Navigation("habitosDroga");

                    b.Navigation("habitosSueño");

                    b.Navigation("medicamentos");

                    b.Navigation("perfil");

                    b.Navigation("segMenAlimentacion");

                    b.Navigation("segMenEjercicio");

                    b.Navigation("segMenHabitos");

                    b.Navigation("segMenMedicamentos");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenAlimentacion", b =>
                {
                    b.Navigation("resultados");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenHabitos", b =>
                {
                    b.Navigation("resultados");
                });
#pragma warning restore 612, 618
        }
    }
}
