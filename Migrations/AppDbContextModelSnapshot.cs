// <auto-generated />
using System;
using AppVidaSana.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppVidaSana.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppVidaSana.Models.Cuenta", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("AppVidaSana.Models.Ejercicio", b =>
                {
                    b.Property<Guid>("idejercicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("fecha")
                        .HasColumnType("date");

                    b.Property<Guid>("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("intensidad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tiempo")
                        .HasColumnType("int");

                    b.Property<string>("tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idejercicio");

                    b.HasIndex("id");

                    b.ToTable("Ejercicios");
                });

            modelBuilder.Entity("AppVidaSana.Models.Perfil", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("estatura")
                        .HasColumnType("int");

                    b.Property<DateOnly>("fechanacimiento")
                        .HasColumnType("date");

                    b.Property<int>("peso")
                        .HasColumnType("int");

                    b.Property<string>("protocolo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sexo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Perfiles");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenEjercicio", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("actcaminata")
                        .HasColumnType("real");

                    b.Property<float>("afmoderada")
                        .HasColumnType("real");

                    b.Property<float>("afvigorosa")
                        .HasColumnType("real");

                    b.Property<int>("año")
                        .HasColumnType("int");

                    b.Property<string>("conductasend")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nivelAF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("pregunta1")
                        .HasColumnType("int");

                    b.Property<int>("pregunta2")
                        .HasColumnType("int");

                    b.Property<int>("pregunta3")
                        .HasColumnType("int");

                    b.Property<int>("pregunta4")
                        .HasColumnType("int");

                    b.Property<int>("pregunta5")
                        .HasColumnType("int");

                    b.Property<int>("pregunta6")
                        .HasColumnType("int");

                    b.Property<int>("pregunta7")
                        .HasColumnType("int");

                    b.Property<float>("totalMET")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("SegMenEjercicios");
                });

            modelBuilder.Entity("AppVidaSana.Models.Ejercicio", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithMany("ejercicios")
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Perfil", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithOne("perfil")
                        .HasForeignKey("AppVidaSana.Models.Perfil", "id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.SegMenEjercicio", b =>
                {
                    b.HasOne("AppVidaSana.Models.Cuenta", "cuenta")
                        .WithOne("seg_men_ej")
                        .HasForeignKey("AppVidaSana.Models.Seguimientos_Mensuales.SegMenEjercicio", "id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("cuenta");
                });

            modelBuilder.Entity("AppVidaSana.Models.Cuenta", b =>
                {
                    b.Navigation("ejercicios");

                    b.Navigation("perfil");

                    b.Navigation("seg_men_ej");
                });
#pragma warning restore 612, 618
        }
    }
}
