// <auto-generated />
using System;
using AppVidaSana.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AppVidaSana.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AppVidaSana.Models.Account", b =>
                {
                    b.Property<Guid>("accountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("accountID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.FoodsBreakfast", b =>
                {
                    b.Property<Guid>("foodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("amountConsumed")
                        .HasColumnType("real");

                    b.Property<Guid>("breakfastID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nameFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("foodID");

                    b.HasIndex("breakfastID");

                    b.ToTable("FoodsBreakfast");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.FoodsDinner", b =>
                {
                    b.Property<Guid>("foodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("amountConsumed")
                        .HasColumnType("real");

                    b.Property<Guid>("dinnerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nameFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("foodID");

                    b.HasIndex("dinnerID");

                    b.ToTable("FoodsDinner");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.FoodsLunch", b =>
                {
                    b.Property<Guid>("foodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("amountConsumed")
                        .HasColumnType("real");

                    b.Property<Guid>("lunchID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nameFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("foodID");

                    b.HasIndex("lunchID");

                    b.ToTable("FoodsLunch");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.FoodsMeal", b =>
                {
                    b.Property<Guid>("foodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("amountConsumed")
                        .HasColumnType("real");

                    b.Property<Guid>("mealID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nameFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("foodID");

                    b.HasIndex("mealID");

                    b.ToTable("FoodsMeal");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.FoodsSnack", b =>
                {
                    b.Property<Guid>("foodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("amountConsumed")
                        .HasColumnType("real");

                    b.Property<string>("nameFood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("snackID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("foodID");

                    b.HasIndex("snackID");

                    b.ToTable("FoodsSnack");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Breakfast", b =>
                {
                    b.Property<Guid>("breakfastID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("dateBreakfast")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("hourBreakfast")
                        .HasColumnType("time");

                    b.Property<string>("linkedEmotions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("satietyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("breakfastID");

                    b.HasIndex("accountID");

                    b.ToTable("Breakfast");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Dinner", b =>
                {
                    b.Property<Guid>("dinnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("dateDinner")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("hourDinner")
                        .HasColumnType("time");

                    b.Property<string>("linkedEmotions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("satietyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("dinnerID");

                    b.HasIndex("accountID");

                    b.ToTable("Dinner");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Lunch", b =>
                {
                    b.Property<Guid>("lunchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("dateLunch")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("hourLunch")
                        .HasColumnType("time");

                    b.Property<string>("linkedEmotions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("satietyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("lunchID");

                    b.HasIndex("accountID");

                    b.ToTable("Lunch");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Meal", b =>
                {
                    b.Property<Guid>("mealID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("dateMeal")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("hourMeal")
                        .HasColumnType("time");

                    b.Property<string>("linkedEmotions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("satietyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("mealID");

                    b.HasIndex("accountID");

                    b.ToTable("Meal");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Snack", b =>
                {
                    b.Property<Guid>("snackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("dateSnack")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("hourSnack")
                        .HasColumnType("time");

                    b.Property<string>("linkedEmotions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("satietyLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("snackID");

                    b.HasIndex("accountID");

                    b.ToTable("Snack");
                });

            modelBuilder.Entity("AppVidaSana.Models.Exercise", b =>
                {
                    b.Property<Guid>("exerciseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("dateExercise")
                        .HasColumnType("date");

                    b.Property<string>("intensityExercise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("timeSpent")
                        .HasColumnType("int");

                    b.Property<string>("typeExercise")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("exerciseID");

                    b.HasIndex("accountID");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("AppVidaSana.Models.Graphics.GExercise", b =>
                {
                    b.Property<Guid>("timeSpentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("dateExercise")
                        .HasColumnType("date");

                    b.Property<int>("totalTimeSpent")
                        .HasColumnType("int");

                    b.HasKey("timeSpentID");

                    b.HasIndex("accountID");

                    b.ToTable("graphicsExercise");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.DrinkHabit", b =>
                {
                    b.Property<Guid>("habitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("amountConsumed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("dateHabit")
                        .HasColumnType("date");

                    b.Property<string>("typeDrink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("habitID");

                    b.HasIndex("accountID");

                    b.ToTable("DrinkHabit");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.DrugsHabit", b =>
                {
                    b.Property<Guid>("habitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("cigarettesSmoked")
                        .HasColumnType("int");

                    b.Property<DateOnly>("dateHabit")
                        .HasColumnType("date");

                    b.Property<string>("predominantEmotionalState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("habitID");

                    b.HasIndex("accountID");

                    b.ToTable("DrugsHabit");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.SleepHabit", b =>
                {
                    b.Property<Guid>("habitID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("dateHabit")
                        .HasColumnType("date");

                    b.Property<string>("perceptionOfRelaxation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sleepHours")
                        .HasColumnType("int");

                    b.HasKey("habitID");

                    b.HasIndex("accountID");

                    b.ToTable("SleepHabit");
                });

            modelBuilder.Entity("AppVidaSana.Models.Medication", b =>
                {
                    b.Property<Guid>("medicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("dailyFrequency")
                        .HasColumnType("int");

                    b.Property<DateOnly>("dateMedication")
                        .HasColumnType("date");

                    b.Property<int>("dose")
                        .HasColumnType("int");

                    b.Property<string>("nameMedication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("schedule1")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("schedule2")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("schedule3")
                        .HasColumnType("time");

                    b.Property<string>("weeklyFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("medicationID");

                    b.HasIndex("accountID");

                    b.ToTable("Medication");
                });

            modelBuilder.Entity("AppVidaSana.Models.Profiles", b =>
                {
                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("birthDate")
                        .HasColumnType("date");

                    b.Property<string>("protocolToFollow")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stature")
                        .HasColumnType("int");

                    b.Property<int>("weigth")
                        .HasColumnType("int");

                    b.HasKey("accountID");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.MFUsExercise", b =>
                {
                    b.Property<Guid>("monthlyFollowUpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("actModerate")
                        .HasColumnType("real");

                    b.Property<float>("actVigorous")
                        .HasColumnType("real");

                    b.Property<float>("actWalking")
                        .HasColumnType("real");

                    b.Property<string>("levelAF")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("month")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("question1")
                        .HasColumnType("int");

                    b.Property<int>("question2")
                        .HasColumnType("int");

                    b.Property<int>("question3")
                        .HasColumnType("int");

                    b.Property<int>("question4")
                        .HasColumnType("int");

                    b.Property<int>("question5")
                        .HasColumnType("int");

                    b.Property<int>("question6")
                        .HasColumnType("int");

                    b.Property<int>("question7")
                        .HasColumnType("int");

                    b.Property<string>("sedentaryBehavior")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("totalMET")
                        .HasColumnType("real");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("monthlyFollowUpID");

                    b.HasIndex("accountID");

                    b.ToTable("MFUsExcercise");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.MFUsHabits", b =>
                {
                    b.Property<Guid>("monthlyFollowUpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("answerQuestion1")
                        .HasColumnType("time");

                    b.Property<int>("answerQuestion2")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("answerQuestion3")
                        .HasColumnType("time");

                    b.Property<int>("answerQuestion4")
                        .HasColumnType("int");

                    b.Property<string>("answerQuestion5a")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion5b")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion5c")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion5d")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion5e")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion5f")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion5g")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion5h")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion5i")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion5j")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion8")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion9")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("month")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("monthlyFollowUpID");

                    b.HasIndex("accountID");

                    b.ToTable("MFUsHabits");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.MFUsMedications", b =>
                {
                    b.Property<Guid>("monthlyFollowUpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("answerQuestion1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("month")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("treatmentAdherence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("monthlyFollowUpID");

                    b.HasIndex("accountID");

                    b.ToTable("MFUsMedications");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.MFUsNutrition", b =>
                {
                    b.Property<Guid>("monthlyFollowUpID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("answerQuestion1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion6")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion7")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion8")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("answerQuestion9")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("month")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("year")
                        .HasColumnType("int");

                    b.HasKey("monthlyFollowUpID");

                    b.HasIndex("accountID");

                    b.ToTable("MFUsNutrition");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.Respuestas.NutritionResults", b =>
                {
                    b.Property<Guid>("resultsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("classification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("monthlyFollowUpID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("pointsQuestion1")
                        .HasColumnType("int");

                    b.Property<int>("pointsQuestion10")
                        .HasColumnType("int");

                    b.Property<int>("pointsQuestion2")
                        .HasColumnType("int");

                    b.Property<int>("pointsQuestion3")
                        .HasColumnType("int");

                    b.Property<int>("pointsQuestion4")
                        .HasColumnType("int");

                    b.Property<int>("pointsQuestion5")
                        .HasColumnType("int");

                    b.Property<int>("pointsQuestion6")
                        .HasColumnType("int");

                    b.Property<int>("pointsQuestion7")
                        .HasColumnType("int");

                    b.Property<int>("pointsQuestion8")
                        .HasColumnType("int");

                    b.Property<int>("pointsQuestion9")
                        .HasColumnType("int");

                    b.Property<int>("totalPoints")
                        .HasColumnType("int");

                    b.HasKey("resultsID");

                    b.HasIndex("monthlyFollowUpID")
                        .IsUnique();

                    b.ToTable("NutritionResults");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.Resultados.HabitsResults", b =>
                {
                    b.Property<Guid>("resultsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("classification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("globalClassification")
                        .HasColumnType("int");

                    b.Property<Guid>("monthlyFollowUpID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("resultComponent1")
                        .HasColumnType("int");

                    b.Property<int>("resultComponent2")
                        .HasColumnType("int");

                    b.Property<int>("resultComponent3")
                        .HasColumnType("int");

                    b.Property<int>("resultComponent4")
                        .HasColumnType("int");

                    b.Property<int>("resultComponent5")
                        .HasColumnType("int");

                    b.Property<int>("resultComponent6")
                        .HasColumnType("int");

                    b.Property<int>("resultComponent7")
                        .HasColumnType("int");

                    b.HasKey("resultsID");

                    b.HasIndex("monthlyFollowUpID")
                        .IsUnique();

                    b.ToTable("HabitsResults");
                });

            modelBuilder.Entity("AppVidaSana.Models.SideEffect", b =>
                {
                    b.Property<Guid>("sideEffectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("accountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("dateSideEffect")
                        .HasColumnType("date");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeOnly>("endSchedule")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("initialSchedule")
                        .HasColumnType("time");

                    b.HasKey("sideEffectID");

                    b.HasIndex("accountID");

                    b.ToTable("SideEffect");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.FoodsBreakfast", b =>
                {
                    b.HasOne("AppVidaSana.Models.Alimentación.Breakfast", "breakfast")
                        .WithMany("foodsBreakfast")
                        .HasForeignKey("breakfastID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("breakfast");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.FoodsDinner", b =>
                {
                    b.HasOne("AppVidaSana.Models.Alimentación.Dinner", "dinner")
                        .WithMany("foodsDinner")
                        .HasForeignKey("dinnerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("dinner");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.FoodsLunch", b =>
                {
                    b.HasOne("AppVidaSana.Models.Alimentación.Lunch", "lunch")
                        .WithMany("foodsLunch")
                        .HasForeignKey("lunchID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("lunch");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.FoodsMeal", b =>
                {
                    b.HasOne("AppVidaSana.Models.Alimentación.Meal", "meal")
                        .WithMany("foodsMeal")
                        .HasForeignKey("mealID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("meal");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Alimentos.FoodsSnack", b =>
                {
                    b.HasOne("AppVidaSana.Models.Alimentación.Snack", "snack")
                        .WithMany("foodsSnack")
                        .HasForeignKey("snackID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("snack");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Breakfast", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("breakfasts")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Dinner", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("dinners")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Lunch", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("lunches")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Meal", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("meals")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Snack", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("snacks")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Exercise", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("exercises")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Graphics.GExercise", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("graphicsValuesExercise")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.DrinkHabit", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("habitsDrink")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.DrugsHabit", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("habitsDrugs")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Habitos.SleepHabit", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("habitsSleep")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Medication", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("medications")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Profiles", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithOne("profile")
                        .HasForeignKey("AppVidaSana.Models.Profiles", "accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.MFUsExercise", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("MFUsExercise")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.MFUsHabits", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("MFUsHabits")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.MFUsMedications", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("MFUsMedications")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.MFUsNutrition", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("MFUsNutrition")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.Respuestas.NutritionResults", b =>
                {
                    b.HasOne("AppVidaSana.Models.Seguimientos_Mensuales.MFUsNutrition", "MFUsNutrition")
                        .WithOne("results")
                        .HasForeignKey("AppVidaSana.Models.Seguimientos_Mensuales.Respuestas.NutritionResults", "monthlyFollowUpID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MFUsNutrition");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.Resultados.HabitsResults", b =>
                {
                    b.HasOne("AppVidaSana.Models.Seguimientos_Mensuales.MFUsHabits", "MFUsHabits")
                        .WithOne("results")
                        .HasForeignKey("AppVidaSana.Models.Seguimientos_Mensuales.Resultados.HabitsResults", "monthlyFollowUpID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MFUsHabits");
                });

            modelBuilder.Entity("AppVidaSana.Models.SideEffect", b =>
                {
                    b.HasOne("AppVidaSana.Models.Account", "account")
                        .WithMany("sideEffects")
                        .HasForeignKey("accountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("account");
                });

            modelBuilder.Entity("AppVidaSana.Models.Account", b =>
                {
                    b.Navigation("MFUsExercise");

                    b.Navigation("MFUsHabits");

                    b.Navigation("MFUsMedications");

                    b.Navigation("MFUsNutrition");

                    b.Navigation("breakfasts");

                    b.Navigation("dinners");

                    b.Navigation("exercises");

                    b.Navigation("graphicsValuesExercise");

                    b.Navigation("habitsDrink");

                    b.Navigation("habitsDrugs");

                    b.Navigation("habitsSleep");

                    b.Navigation("lunches");

                    b.Navigation("meals");

                    b.Navigation("medications");

                    b.Navigation("profile");

                    b.Navigation("sideEffects");

                    b.Navigation("snacks");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Breakfast", b =>
                {
                    b.Navigation("foodsBreakfast");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Dinner", b =>
                {
                    b.Navigation("foodsDinner");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Lunch", b =>
                {
                    b.Navigation("foodsLunch");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Meal", b =>
                {
                    b.Navigation("foodsMeal");
                });

            modelBuilder.Entity("AppVidaSana.Models.Alimentación.Snack", b =>
                {
                    b.Navigation("foodsSnack");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.MFUsHabits", b =>
                {
                    b.Navigation("results");
                });

            modelBuilder.Entity("AppVidaSana.Models.Seguimientos_Mensuales.MFUsNutrition", b =>
                {
                    b.Navigation("results");
                });
#pragma warning restore 612, 618
        }
    }
}
